/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrivateDCA {
  export type OrderStruct = { user: AddressLike; amount: BigNumberish };

  export type OrderStructOutput = [user: string, amount: bigint] & {
    user: string;
    amount: bigint;
  };
}

export interface PrivateDCAInterface extends Interface {
  getFunction(
    nameOrSignature: "getOrder" | "getOrderCount" | "orders" | "storeOrder"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OrderStored"): EventFragment;

  encodeFunctionData(
    functionFragment: "getOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeOrder",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeOrder", data: BytesLike): Result;
}

export namespace OrderStoredEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivateDCA extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateDCA;
  waitForDeployment(): Promise<this>;

  interface: PrivateDCAInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getOrder: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [PrivateDCA.OrderStructOutput],
    "view"
  >;

  getOrderCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  orders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { user: string; amount: bigint }],
    "view"
  >;

  storeOrder: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [PrivateDCA.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { user: string; amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "storeOrder"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OrderStored"
  ): TypedContractEvent<
    OrderStoredEvent.InputTuple,
    OrderStoredEvent.OutputTuple,
    OrderStoredEvent.OutputObject
  >;

  filters: {
    "OrderStored(address,uint256)": TypedContractEvent<
      OrderStoredEvent.InputTuple,
      OrderStoredEvent.OutputTuple,
      OrderStoredEvent.OutputObject
    >;
    OrderStored: TypedContractEvent<
      OrderStoredEvent.InputTuple,
      OrderStoredEvent.OutputTuple,
      OrderStoredEvent.OutputObject
    >;
  };
}
